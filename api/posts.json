{"total":3,"pageSize":10,"pageCount":1,"data":[{"title":"Vue生命周期&&Vue动画效果","slug":"Vue生命周期-Vue动画效果","date":"2019-06-24T12:24:10.000Z","updated":"2019-06-24T15:17:34.834Z","comments":true,"pin":null,"path":"api/articles/Vue生命周期-Vue动画效果.json","excerpt":"","keywords":null,"cover":"https://i.loli.net/2019/06/24/5d10e0f32e44111460.png","content":"<h1 id=\"1-Vue的生命周期\"><a href=\"#1-Vue的生命周期\" class=\"headerlink\" title=\"1.  Vue的生命周期\"></a>1.  Vue的生命周期</h1><p>Vue的生命周期<img src=\"https://i.loli.net/2019/06/24/5d10e0f32e44111460.png\" alt></p>\n<h2 id=\"1-1-生命周期的钩子函数\"><a href=\"#1-1-生命周期的钩子函数\" class=\"headerlink\" title=\"1.1 生命周期的钩子函数\"></a>1.1 生命周期的钩子函数</h2><h3 id=\"1-1-1-创建Vue实例钩子函数\"><a href=\"#1-1-1-创建Vue实例钩子函数\" class=\"headerlink\" title=\"1.1.1 创建Vue实例钩子函数\"></a>1.1.1 创建Vue实例钩子函数</h3><ul>\n<li>beforeCreate()是生命周期钩子的第一个钩子函数，在vue实例创建之前做的事情,在这个方法中我们无法获取实例中的数据和定义的方法.</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeCreate()&#123;</span><br><span class=\"line\">            console.log(this.msg,&quot;beforeCreate&quot;);</span><br><span class=\"line\">            console.log(this.add,&quot;beforeCreate&quot;);</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>created()是生命周期钩子的第二个钩子函数，vue实例已经创建完毕，此时可以获取实例中的数据和定义的方法。此方法不用于获取页面元素。</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created()&#123;</span><br><span class=\"line\">            console.log(this.msg,&quot;created&quot;);</span><br><span class=\"line\">            console.log(this.add,&quot;created&quot;);</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"1-1-2-确定页面模板的钩子函数（内存中构建页面并且绑定到dom中）\"><a href=\"#1-1-2-确定页面模板的钩子函数（内存中构建页面并且绑定到dom中）\" class=\"headerlink\" title=\"1.1.2 确定页面模板的钩子函数（内存中构建页面并且绑定到dom中）\"></a>1.1.2 确定页面模板的钩子函数（内存中构建页面并且绑定到dom中）</h3><ul>\n<li>beforeMount()是生命周期钩子的第三个钩子函数，此方法在内存中构建页面，但是这个方法在执行的时候，页面中的元素还没有被真正替换过来，只是之前写的一些模板字符串。</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeMount()&#123;</span><br><span class=\"line\">            console.log(document.getElementById(&quot;title&quot;),&quot;beforeMount&quot;);</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>mountd()是生命周期钩子的第四个钩子函数,表示内存中的页面已经构建完毕，并且页面的模板数据也已经被完全替换了，会将模板挂载到页面中，用户已经可以看到渲染好的页面了。在mounted()方法中我们可以获取到真正的页面</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mounted()&#123;</span><br><span class=\"line\">            console.log(document.getElementById(&quot;title&quot;),&quot;mounted&quot;);</span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"1-1-3-数据源发生变化之后，和更新页面相关的\"><a href=\"#1-1-3-数据源发生变化之后，和更新页面相关的\" class=\"headerlink\" title=\"1.1.3 数据源发生变化之后，和更新页面相关的\"></a>1.1.3 数据源发生变化之后，和更新页面相关的</h3><ul>\n<li>beforeUpdate()是生命周期钩子的第五个钩子函数，beforeUpdate 是在数据源发生变化之后，页面更新之前执行，所以在这个方法中我们无法获取到最新的页面。</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beforeUpdate()&#123;</span><br><span class=\"line\">           console.log(document.getElementById(&apos;title&apos;).innerText,&quot;beforeUpdate&quot;)</span><br><span class=\"line\">       &#125;,</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>updated()是生命周期钩子的第六个钩子函数，在数据源变化之后，页面更新之后执行，在这个方法中我们可以获取到最新的页面。</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updated()&#123;</span><br><span class=\"line\">           console.log(document.getElementById(&apos;title&apos;).innerText,&quot;beforeUpdate&quot;)</span><br><span class=\"line\">       &#125;,</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"1-1-4-销毁Vue实例的\"><a href=\"#1-1-4-销毁Vue实例的\" class=\"headerlink\" title=\"1.1.4  销毁Vue实例的\"></a>1.1.4  销毁Vue实例的</h3><ul>\n<li>beforeDestroy() 销毁实例之前，可以在这个方法中做一些数据保存工作。</li>\n<li>destroyed() 销毁实例之后</li>\n</ul>\n<h3 id=\"1-1-5-el和template的比较\"><a href=\"#1-1-5-el和template的比较\" class=\"headerlink\" title=\"1.1.5  el和template的比较\"></a>1.1.5  el和template的比较</h3><ul>\n<li><p>如果写了template属性，此时会将template对应的html代码作为页面模板进行编译</p>\n</li>\n<li><p>如果仅仅只是写了el，没有写template，此时会将el对应的html代码作为页面模板进行编译</p>\n</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ar vm = new Vue(&#123;</span><br><span class=\"line\">    el:&quot;#app&quot;,</span><br><span class=\"line\">    template:&quot;#tmpl&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//通过代码绑定el</span><br><span class=\"line\">vm.$mount(&quot;#app&quot;);</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"1-2-Vue的网络请求\"><a href=\"#1-2-Vue的网络请求\" class=\"headerlink\" title=\"1.2 Vue的网络请求\"></a>1.2 Vue的网络请求</h2><table>\n<thead>\n<tr>\n<th>1.vue-resource</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>2.axios</strong> : 是一个基于promise 的HTTP 库，可以用在浏览器和node.js 中</td>\n</tr>\n<tr>\n<td><strong>3原生ajax</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-2-1-axios的特点\"><a href=\"#1-2-1-axios的特点\" class=\"headerlink\" title=\"1.2.1 axios的特点\"></a>1.2.1 axios的特点</h3><p>axios的特点：</p>\n<p>·         从浏览器中创建<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"noopener\">XMLHttpRequests</a></p>\n<p>·         从 node.js 创建<a href=\"http://nodejs.org/api/http.html\" target=\"_blank\" rel=\"noopener\">http</a>请求</p>\n<p>·         支持<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener\">Promise</a>API</p>\n<p>·         拦截请求和响应</p>\n<p>·         转换请求数据和响应数据</p>\n<p>·         取消请求</p>\n<p>·        自动转换 JSON 数据</p>\n<h3 id=\"1-2-1-axios的使用\"><a href=\"#1-2-1-axios的使用\" class=\"headerlink\" title=\"1.2.1 axios的使用\"></a>1.2.1 axios的使用</h3><ol>\n<li>在页面引入axios的js文件</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;./axios.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>\n<ol start=\"2\">\n<li>添加axios的配置信息</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局配置axios</span><br><span class=\"line\">axios.defaults.baseURL = &apos;http://localhost:3000/&apos;;</span><br><span class=\"line\">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded&apos;;</span><br></pre></td></tr></table></figure></div>\n<ol start=\"3\">\n<li>使用axios发送get和post请求</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">testGet()&#123;</span><br><span class=\"line\">                axios.get(&apos;api/getnewslist&apos;,&#123;</span><br><span class=\"line\">                    params:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .then(function (response) &#123;</span><br><span class=\"line\">                    console.log(response.data);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .catch(function (error) &#123;</span><br><span class=\"line\">                    console.log(error);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            testPost()&#123;</span><br><span class=\"line\">                axios.post(&apos;api/news/new&apos;, &#123;</span><br><span class=\"line\">                    name: &apos;李宁&apos;,</span><br><span class=\"line\">                    id: &apos;1001&apos;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .then(function (response) &#123;</span><br><span class=\"line\">                    console.log(response.data);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .catch(function (error) &#123;</span><br><span class=\"line\">                    console.log(error);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></div>\n<h1 id=\"2-Vue的动画\"><a href=\"#2-Vue的动画\" class=\"headerlink\" title=\"2. Vue的动画\"></a>2. Vue的动画</h1><h2 id=\"2-1-Vue动画的使用场景\"><a href=\"#2-1-Vue动画的使用场景\" class=\"headerlink\" title=\"2.1 Vue动画的使用场景\"></a>2.1 Vue动画的使用场景</h2><p>vue中的动画很大程度上是给元素和组件添加进入(要显示了)/离开(要消失了)过渡</p>\n<table>\n<thead>\n<tr>\n<th><strong>1.在要进行动画的元素上使用<transition>的组件</transition></strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>2.使用v-if或者v-show来切换的元素的隐藏和显示</strong></td>\n</tr>\n<tr>\n<td><strong>3.需要添加对应的css样式</strong></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-2-Vue动画的阶段\"><a href=\"#2-2-Vue动画的阶段\" class=\"headerlink\" title=\"2.2  Vue动画的阶段\"></a>2.2  Vue动画的阶段</h2><table>\n<thead>\n<tr>\n<th>Vue将动画分为两个部分：1.入场动画(元素由隐藏=&gt;显示)   2.出场动画(元素由显示=&gt;隐藏)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://i.loli.net/2019/06/24/5d10e6d846bfc89414.png\" alt=\"1561385871060\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-3-Vue动画的使用方式\"><a href=\"#2-3-Vue动画的使用方式\" class=\"headerlink\" title=\"2.3  Vue动画的使用方式\"></a>2.3  Vue动画的使用方式</h2><p>Vue动画共有六种使用方式：</p>\n<ol>\n<li><p>添加css过渡类名来使用动画</p>\n</li>\n<li><p>在vue中使用animation动画</p>\n</li>\n<li><p>使用animate.css</p>\n</li>\n<li><p>使用js的钩子函数实现动画</p>\n<pre><code>上面学的动画一般用作表示完整入场和出场动画，如果要表示半场动画，我们可以使用js的钩子函数。可以通过 js代码来控制动画的过程，计算元素的位置。\n</code></pre></li>\n<li><p>多个条件之间的过渡</p>\n</li>\n<li><p>列表动画</p>\n</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.添加css过渡类名来使用动画</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;切换&quot; @click=&quot;show=!show&quot;&gt;</span><br><span class=\"line\">&lt;transition&gt;</span><br><span class=\"line\">    &lt;p class=&quot;p&quot; v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br><span class=\"line\">&lt;/transition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.v-enter-active, .v-leave-active &#123;</span><br><span class=\"line\">     transition: all 1s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*指定动画enter动画从什么状态开始显示</span><br><span class=\"line\">  指定leave动画运动的目标状态</span><br><span class=\"line\">*/</span><br><span class=\"line\">.v-enter,.v-leave-to&#123;</span><br><span class=\"line\">    opacity: 0;</span><br><span class=\"line\">    transform: translateX(150px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/*指定enter动画运到什么状态</span><br><span class=\"line\">指定leave动画从什么状态开始</span><br><span class=\"line\">*/</span><br><span class=\"line\">/*.v-enter-to 可以省略，如果不写则回到元素的默认状态*/</span><br><span class=\"line\">/* .v-enter-to,.v-leave&#123;</span><br><span class=\"line\">       opacity: 1.0;</span><br><span class=\"line\">       transform: translateX(0px);</span><br><span class=\"line\">&#125;  */</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.在vue中使用animation动画</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;切换&quot; @click=&quot;show=!show&quot;&gt;</span><br><span class=\"line\">&lt;!---</span><br><span class=\"line\">        vue中使用animation动画的步骤：</span><br><span class=\"line\">        1.在需要进行动画的元素上加上&lt;transition&gt;组件</span><br><span class=\"line\">        2.需要进行动画的元素通过v-if和v-show来进行切换</span><br><span class=\"line\">        3.需要在css样式中声明关键帧 @keyframes</span><br><span class=\"line\">        4.在.my-enter-active和.my-leave-active中定义animation动画</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">&lt;transition name=&quot;my&quot;&gt;</span><br><span class=\"line\">   &lt;p v-if=&quot;show&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis enim libero, at&lt;/p&gt;</span><br><span class=\"line\">&lt;/transition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">.my-enter-active&#123;</span><br><span class=\"line\">    animation: pAnim 0.5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.my-leave-active &#123;</span><br><span class=\"line\">    animation: pAnim 0.5s reverse;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">@keyframes pAnim&#123;</span><br><span class=\"line\">     0% &#123;</span><br><span class=\"line\">        transform: scale(0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">        transform: scale(1.5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">        transform: scale(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.使用animate.css</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; href=&quot;./animate.css&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;切换&quot; @click=&quot;show=!show&quot;&gt;</span><br><span class=\"line\">&lt;!--  enter-active-class 指定入场动画的的类名  样式均来自于animate.css中的样式</span><br><span class=\"line\">      leave-active-class 指定出厂动画的类名</span><br><span class=\"line\">      duration: 指定入场动画和出场动画的时常</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;transition name=&quot;my&quot; </span><br><span class=\"line\">          enter-active-class=&quot;animated jello&quot;</span><br><span class=\"line\">          leave-active-class=&quot;animated flipOutX&quot;</span><br><span class=\"line\">          :duration=&quot;&#123; enter: 1000, leave: 800 &#125;&quot;&gt;</span><br><span class=\"line\">            &lt;p v-if=&quot;show&quot;&gt;文字&lt;/p&gt;</span><br><span class=\"line\">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4.使用js的钩子函数实现动画</span><br><span class=\"line\"></span><br><span class=\"line\">      上面学的动画一般用作表示完整入场和出场动画，如果要表示半场动画，我们可以使用js的钩子函数。可以通过 js代码来控制动画的过程，计算元素的位置。</span><br><span class=\"line\"> &lt;!---</span><br><span class=\"line\">             @before-enter=&quot;beforeEnter&quot;   入场动画第一个执行的函数，元素显示之前</span><br><span class=\"line\">             @enter=&quot;enter&quot;                入场动画第二个执行的函数，入场动画过程中</span><br><span class=\"line\">             @after-enter=&quot;afterEnter&quot;    入场动画第三个执行的函数，入场动画执行完毕</span><br><span class=\"line\">            </span><br><span class=\"line\">             @before-leave=&quot;beforeLeave&quot;   出场动画第一个执行的函数，元素消失之前</span><br><span class=\"line\">             @leave=&quot;leave&quot;                出场动画第二个执行的函数，出场动画过程中</span><br><span class=\"line\">             @after-leave=&quot;afterLeave&quot;&gt;    出场动画第三个执行的函数，出场动画执行完毕</span><br><span class=\"line\"></span><br><span class=\"line\">             如果写了上面的钩子函数，在切换小球的时候不会再给小球添加display:none这个样式了，需要我们在钩子函数中手动控制小球样式</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;transition</span><br><span class=\"line\">            @before-enter=&quot;beforeEnter&quot;</span><br><span class=\"line\">            @enter=&quot;enter&quot;</span><br><span class=\"line\">            @after-enter=&quot;afterEnter&quot;</span><br><span class=\"line\">            @before-leave=&quot;beforeLeave&quot;</span><br><span class=\"line\">            @leave=&quot;leave&quot;</span><br><span class=\"line\">            @after-leave=&quot;afterLeave&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;div class=&quot;ball&quot; v-show=&quot;show&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;/transition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//el 表示要进行动画的那个元素</span><br><span class=\"line\">            beforeEnter(el)&#123;</span><br><span class=\"line\">                console.log(&quot;beforeEnter&quot;,el)</span><br><span class=\"line\">                el.style.transform = &quot;translate(0px, 0px)&quot;</span><br><span class=\"line\">                el.style.opacity = 0.0</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            //el 表示要进行动画的那个元素  </span><br><span class=\"line\">            //done表示afterEnter函数</span><br><span class=\"line\">            enter(el,done)&#123;</span><br><span class=\"line\">                console.log(&quot;enter&quot;,el)</span><br><span class=\"line\">                //强制元素刷新，如果不写这个，则没有动画</span><br><span class=\"line\">                el.offsetWidth;</span><br><span class=\"line\">                el.style.transform = &quot;translate(150px, 450px)&quot;</span><br><span class=\"line\">                el.style.transition = &apos;all 1s ease&apos;</span><br><span class=\"line\">                el.style.opacity = 1.0</span><br><span class=\"line\"></span><br><span class=\"line\">                //当el的过渡动画执行完毕的时候调用done函数</span><br><span class=\"line\">                el.addEventListener(&apos;transitionend&apos;, done);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            afterEnter(el)&#123;</span><br><span class=\"line\">                console.log(&quot;afterEnter&quot;)</span><br><span class=\"line\">            &#125;,</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5.多个条件之间的过渡</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;切换&quot; @click=&quot;toggle&quot;&gt;</span><br><span class=\"line\">&lt;!-- 当我们要在多个条件之间进行过度的时候，我们可以transition组件</span><br><span class=\"line\">             mode=&quot;out-in&quot; ：先淡出在淡入</span><br><span class=\"line\"></span><br><span class=\"line\">             如果我们不向使用mode，我们可以给 .v-leave-active添加一个 position: absolute; 样式，此时动画会在当前的元素上面进行</span><br><span class=\"line\">        --&gt;</span><br><span class=\"line\">        &lt;transition mode=&quot;out-in&quot;&gt;</span><br><span class=\"line\">            &lt;button v-if=&quot;docState === &apos;saved&apos;&quot; key=&quot;saved&quot;&gt;</span><br><span class=\"line\">                Edit</span><br><span class=\"line\">            &lt;/button&gt;</span><br><span class=\"line\">            &lt;button v-if=&quot;docState === &apos;edited&apos;&quot; key=&quot;edited&quot;&gt;</span><br><span class=\"line\">                Save</span><br><span class=\"line\">            &lt;/button&gt;</span><br><span class=\"line\">        &lt;/transition&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">.v-enter-active, .v-leave-active &#123;</span><br><span class=\"line\">            transition: all 1s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /*指定动画enter动画从什么状态开始显示</span><br><span class=\"line\">          指定leave动画运动的目标状态</span><br><span class=\"line\">        */</span><br><span class=\"line\">        .v-enter,.v-leave-to&#123;</span><br><span class=\"line\">            opacity: 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /*在切换按钮的时候去除从右边*/</span><br><span class=\"line\">        /* .v-leave-active &#123;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">        &#125; */</span><br></pre></td></tr></table></figure></div>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6.列表动画</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;!-- 在实现列表过渡的时候，如果需要过渡的元素，是通过 v-for 循环渲染出来的，不能使用 transition 包裹，需要使用 transitionGroup --&gt;</span><br><span class=\"line\">        &lt;!-- 如果要为 v-for 循环创建的元素设置动画，必须为每一个元素设置 :key 属性 --&gt;</span><br><span class=\"line\">        &lt;!-- 给 transition-group 添加 appear 属性，实现页面刚展示出来时候，入场时候的效果 --&gt;</span><br><span class=\"line\">        &lt;!-- 通过 为 transition-group 元素，设置 tag 属性，指定 transition-group 渲染为指定的元素，如果不指定 tag 属性，默认，渲染为 span 标签 --&gt;</span><br><span class=\"line\">        &lt;transition-group appear tag=&quot;ul&quot;&gt;</span><br><span class=\"line\">            &lt;li v-for=&quot;(item, i) in list&quot; :key=&quot;item.id&quot; @click=&quot;del(i)&quot;&gt;</span><br><span class=\"line\">                 &#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;</span><br><span class=\"line\">            &lt;/li&gt;</span><br><span class=\"line\">        &lt;/transition-group&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.v-enter,</span><br><span class=\"line\">        .v-leave-to &#123;</span><br><span class=\"line\">            opacity: 0;</span><br><span class=\"line\">            transform: translateX(80px);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .v-enter-active,</span><br><span class=\"line\">        .v-leave-active &#123;</span><br><span class=\"line\">            transition: all 0.6s ease;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        /*transition-group 不仅可以进入和离开动画，还可以改变定位。要使用这个新功能只需了解新增的 v-move 特性，它会在元素的改变定位的过程中应用*/</span><br><span class=\"line\">        /* 下面的 .v-move 和 .v-leave-active 配合使用，能够实现列表后续的元素，渐渐地漂上来的效果 。其原理是点击要删除的li的时候动态添加absulute样式，让其脱标，下面元素就可以顶上来了 */</span><br><span class=\"line\">        .v-move &#123;</span><br><span class=\"line\">            /*列表排序过滤*/</span><br><span class=\"line\">            transition: all 1.6s ease;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        .v-leave-active&#123;</span><br><span class=\"line\">            position: absolute;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></div>\n","text":"1.  Vue的生命周期Vue的生命周期 [Figure] ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-04-17T05:12:21.801Z","updated":"2019-04-17T05:12:21.801Z","comments":true,"pin":null,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure></div>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></div>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></div>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></div>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"我个人博客的第一篇博客","slug":"我个人博客的第一篇博客","date":"2019-04-03T13:01:15.000Z","updated":"2019-04-17T05:26:16.035Z","comments":true,"pin":null,"path":"api/articles/我个人博客的第一篇博客.json","excerpt":"","keywords":null,"cover":"https://i.loli.net/2019/04/17/5cb6b8e6e0bc7.png","content":"<h1 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h1><p>　　编译器的第一个工作阶段叫作分词，就是把由字符组成的字符串分解成词法单元。这个概念是理解词法作用域的基础</p>\n<p>　　简单地说，词法作用域就是定义在词法阶段的作用域，是由写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变</p>\n<p><strong>关系</strong></p>\n<p>　　无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所处的位置决定</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var b = a * 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    function bar(c) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        console.log( a, b, c );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    bar(b * 3);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo( 2 ); // 2 4 12</span><br></pre></td></tr></table></figure></div>\n<p>　　在这个例子中有三个逐级嵌套的作用域。为了帮助理解，可以将它们想象成几个逐级包含的气泡</p>\n<p><img src=\"https://i.loli.net/2019/04/17/5cb6b8e6e0bc7.png\"></p>\n<p>　　作用域气泡由其对应的作用域块代码写在哪里决定，它们是逐级包含的</p>\n<p>　　气泡1包含着整个全局作用域，其中只有一个标识符：foo</p>\n<p>　　气泡2包含着foo所创建的作用域，其中有三个标识符：a、bar和b</p>\n<p>　　气泡3包含着bar所创建的作用域，其中只有一个标识符：c</p>\n<p><strong>查找</strong></p>\n<p>　　作用域气泡的结构和互相之间的位置关系给引擎提供了足够的位置信息，引擎用这些信息来查找标识符的位置</p>\n<p>　　在代码片段中，引擎执行console.log(…)声明，并查找a、b和c三个变量的引用。它首先从最内部的作用域，也就是bar(…)函数的作用域开始查找。引擎无法在这里找到a，因此会去上一级到所嵌套的foo(…)的作用域中继续查找。在这里找到了a，因此引擎使用了这个引用。对b来讲也一样。而对c来说，引擎在bar(…)中找到了它</p>\n<p>　　[注意]词法作用域查找只会查找一级标识符，如果代码引用了foo.bar.baz，词法作用域查找只会试图查找foo标识符，找到这个变量后，对象属性访问规则分别接管对bar和baz属性的访问</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>foo = {</p>\n<pre><code>bar:{\n\n    baz: 1\n\n}\n</code></pre><p>};</p>\n<p>console.log(foo.bar.baz);//1</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p><strong>遮蔽</strong></p>\n<p>　　作用域查找从运行时所处的最内部作用域开始，逐级向外或者说向上进行，直到遇见第一个匹配的标识符为止</p>\n<p>　　在多层的嵌套作用域中可以定义同名的标识符，这叫作“遮蔽效应”，内部的标识符“遮蔽”了外部的标识符</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>var a = 0;</p>\n<p>function test(){</p>\n<pre><code>var a = 1;\n\nconsole.log(a);//1\n</code></pre><p>}</p>\n<p>test();</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>　　全局变量会自动为全局对象的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>var a = 0;</p>\n<p>function test(){</p>\n<pre><code>var a = 1;\n\nconsole.log(window.a);//0\n</code></pre><p>}</p>\n<p>test();</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>通过这种技术可以访问那些被同名变量所遮蔽的全局变量。但非全局的变量如果被遮蔽了，无论如何都无法被访问到</p>\n<h1 id=\"作用域链的组成\"><a href=\"#作用域链的组成\" class=\"headerlink\" title=\"作用域链的组成\"></a>作用域链的组成</h1><p>   在JS中，函数的可以允许嵌套的。即，在一个函数的内部声明另一个函数</p>\n<pre><code>类似这样： \n</code></pre><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A()&#123;</span><br><span class=\"line\">  var  a=1;</span><br><span class=\"line\">   function B()&#123;  //在A函数内部，声明了函数B，这就是所谓的函数嵌套。</span><br><span class=\"line\">         var b=2;   </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>   对于A来说，A函数在执行的时候，会创建其A函数的作用域， 那么函数B在创建的时候，会引用A的作用域，类</p>\n<p>函数B在执行的时候，其作用域类似于下面这样：</p>\n<p><img src=\"https://images0.cnblogs.com/blog2015/697856/201504/071952581338727.png\"></p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image007.png\" alt=\"说明: https://images0.cnblogs.com/blog2015/697856/201504/071955114772258.png\"></p>\n<pre><code>从上面的两幅图中可以看出，函数B在执行的时候，是会引用函数A的作用域的。所以，像这种函数作用域的嵌套就组成了所谓的函数作用域链。当在自身作用域内找不到该变量的时候，会沿着作用域链逐步向上查找，若在全局作用域内部仍找不到该变量，则会抛出异常。\n</code></pre><h1 id=\"预解析\"><a href=\"#预解析\" class=\"headerlink\" title=\"预解析\"></a>预解析</h1><p><strong>JavaScript**</strong>解析机制是什么？</p>\n<p>　　JavaScript解析过程分为两个阶段，一个是编译阶段，另外一个就是执行阶段。</p>\n<p>　　<strong>*</strong> <strong>编译阶段</strong></p>\n<pre><code>   　　编译阶段就是我们常说的JavaScript预解析（预处理）阶段，在这个阶段JavaScript解释器将完成把JavaScript脚本代码转换到字节码。\n</code></pre><p>　　<strong>*</strong> <strong>执行阶段</strong></p>\n<p>　　　　在编译阶段JavaScript解释器借助执行环境把字节码生成机械码，并顺序执行。</p>\n<p><strong>编译阶段（预解析阶段）做什么操作？</strong></p>\n<p>　　<strong>* var , function**</strong>声明的变量提升**</p>\n<p>　　　　首先，创建一个当前执行环境下的活动对象，然后将用 <strong>var</strong> <strong>声明的变量</strong>设置为活动对象的属性（也就是将其添加到活动对象当中）并将其赋值为undefined，然后将 <strong>function</strong> <strong>定义的函数</strong> 也添加到活动对象当中。</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p>1 if( false ){</p>\n<p>2     var aa = 20;</p>\n<p>3     var bb = 30;</p>\n<p>4 }</p>\n<p>5 </p>\n<p>6 function AA(){};</p>\n<p>7 function BB(){};</p>\n<p>8 </p>\n<p>9 //var定义的aa,bb以及function定义的AA(),BB()都会被变量提升到window对象下面</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>   　<strong>*</strong> <strong>函数声明与函数表达式在预解析的区别</strong></p>\n<p>　　　　首先，我们知道解析器会对function定义的函数（也就是函数声明）在代码开始执行之前对其实行函数声明提升（function declaration hoisting），所以在函数声明之前调用该函数是不会在执行期间报错，但是函数表达式不同，函数表达式用 var 声明，也就是说解析器会对其变量提升，并对其赋值为undefined，然后在执行期间，等到执行到该var 变量的时候再将其变量指向一个function函数，所以在函数表达式之前执行该函数是会报错的。</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p>1 AA();</p>\n<p>2 function AA(){};</p>\n<p>3 </p>\n<p>4 BB();</p>\n<p>5 var BB = function(){};</p>\n<p>6 </p>\n<p>7 //AA();不会报错，因为是以function的变量提升，BB()会报错，因为是以var的变量提升，到其相当于 BB(); var BB = undefined; BB = function(){};</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>　　<strong>* function</strong> <strong>覆盖</strong></p>\n<p>　　　　若定义了两个同名的函数，则在预解析期间后面一个会覆盖签名一个</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p>1 AA();   // 输出 I am AA_2;</p>\n<p>2 function AA(){</p>\n<p>3    console.log(‘I am AA_1’);</p>\n<p>4 };</p>\n<p>5 </p>\n<p>6 AA();  // 输出 I am AA_2;</p>\n<p>7 function AA(){</p>\n<p>8   console.log(‘I am AA_2’);</p>\n<p>9 }</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>　　* <strong>预解析把变量或函数解析到其运行时的环境中</strong></p>\n<p>　　　　解析器将变量提升并不是将所有的变量都提升到window对象下面，其提升的原则是提升到变量运行的环境中去。</p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p> 1 aa = “I am aa”;</p>\n<p> 2 (function(){</p>\n<p> 3     console.log(aa);  // 输出 aa 是 undefined</p>\n<p> 4     var aa = “I am aa in a function”;</p>\n<p> 5     console.log(aa);  //输出 aa 是 I am aa in a function</p>\n<p> 6 })();</p>\n<p> 7 </p>\n<p> 8 // 这里 aa 被变量提升，但是aa 没有被变量提升到 window下面，而是被提升到其运行的环境 (function(){ })() 中去，也就是等同于</p>\n<p> 9 </p>\n<p>10 // aa =  “I am aa”;</p>\n<p>11 //(function(){</p>\n<p>12 //    var aa;  </p>\n<p>13 //    console.log(aa);  // 输出 aa 是 undefined</p>\n<p>14 //    aa = “I am aa in a function”;</p>\n<p>15 //    console.log(aa);  //输出 aa 是 I am aa in a function</p>\n<p>16 //})();</p>\n<p>17 </p>\n<p>18 </p>\n<p>19 </p>\n<p>20 // 下面代码等同于上面，目的是为了若看不懂上面，则可看下面。</p>\n<p>21 aa = “I am aa”;</p>\n<p>22 function AA(){</p>\n<p>23     console.log(aa);</p>\n<p>24     var aa = “I am aa in a function”;</p>\n<p>25     console.log(aa);</p>\n<p>26 }</p>\n<p>27 AA();</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p><a href=\"javascript:void(0\" target=\"_blank\" rel=\"noopener\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p>　　<strong>* JavaScript“**</strong>预解析<strong><strong>”</strong></strong>分段进行**</p>\n<p>　　　　所谓分段进行是按照<script>标签来分块进行预解析</p>\n<p><a href=\"javascript:void(0\"><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></a>;)</p>\n<p><img src=\"file:///C:\\Users\\student\\AppData\\Local\\Temp\\msohtmlclip1\\01\\clip_image001.gif\" alt=\"说明: 复制代码\"></p>\n<p> 1 <script></p>\n<p> 2 AA();  // 输出 AA2;</p>\n<p> 3 function AA(){</p>\n<p> 4    console.log(‘AA1’);</p>\n<p> 5 }</p>\n<p> 6 </p>\n<p> 7 function AA(){</p>\n<p> 8    console.log(‘AA2’);</p>\n<p> 9 }</p>\n<p>10 </script></p>\n<p>11 </p>\n<p>12 </p>\n<p>13 <script></p>\n<p>14 function AA(){</p>\n<p>15    console.log(‘AA3’);</p>\n<p>16 }</p>\n<p>17 </script></p>\n<p>18 </p>\n<p>19 //上面例子说明function函数声明是分块的，然而至于var变量的提升经过反复验证是不分块的</p>\n","text":"词法作用域　　编译器的第一个工作阶段叫作分词，就是把由字符组成的字符串分解成词法单元。这个概念是理解词法作用域的基础　　简单地说，词法作用域就是定义在词法阶段的作用域，是由写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变关系　　无论函数在哪里被","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"现在是2019年","slug":"现在是2019年","count":1,"path":"api/tags/现在是2019年.json"}]}]}